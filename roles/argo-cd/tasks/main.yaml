---
- name: Role Validation
  ansible.builtin.import_tasks:
    file: validation.yaml
  any_errors_fatal: true

- name: Verify Dependencies
  ansible.builtin.import_tasks:
    file: verify_dependencies.yaml
  any_errors_fatal: true

- name: Role Provisioning
  when: inventory_hostname in k3s_map.server.hosts
  block:
    - name: Validate service state
      ansible.builtin.wait_for:
        port: "{{ k3s_vars.server.api.port }}"
        timeout: 30
      any_errors_fatal: true

    - name: Set checksums fact
      ansible.builtin.uri:
        url: "{{ argocd_project.release.url }}/{{ argocd_project.release.checksum }}"
        return_content: true
      register: checksums
      delay: 1
      retries: 3
      until: checksums is not failed
      check_mode: false
      run_once: true

    - name: Set sha256 checksum fact
      ansible.builtin.set_fact:
        sha256_checksum: "{{ item.split(' ')[0] }}"
      loop: "{{ checksums.content.split('\n') }}"
      when: item | regex_search(argocd_vars.release.file + '$')
      run_once: true

    - name: Install binary
      ansible.builtin.get_url:
        url: "{{ argocd_project.release.url }}/{{ argocd_project.release.file }}"
        checksum: sha256:{{ sha256_checksum }}
        dest: "{{ k3s_map.node.directory.bin }}/argocd"
        owner: root
        group: root
        mode: "755"
      register: result
      delay: 1
      retries: 3
      until: result is not failed

    - name: Add repository
      kubernetes.core.helm_repository:
        name: "{{ argocd_vars.kubernetes.helm.repository.org }}"
        repo_url: "{{ argocd_map.helm.repository.url }}"

    - name: Chart Setup
      run_once: true
      block:
        - name: Set chart postinstall fact
          ansible.builtin.set_fact:
            argocd_postinstall: false

        - name: Install chart
          kubernetes.core.helm:
            chart_ref: "{{ argocd_map.helm.chart.reference }}"
            chart_version: "{{ argocd_vars.kubernetes.helm.chart.version }}"
            kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
            name: "{{ argocd_vars.kubernetes.helm.chart.name }}"
            namespace: "{{ argocd_vars.kubernetes.namespace }}"
            timeout: "{{ argocd_map.helm.timeout }}"
            values: "{{ lookup('ansible.builtin.template', 'values.j2') | from_yaml }}"
            create_namespace: true
            update_repo_cache: true
            wait: true
          register: result
          delay: 1
          retries: 3
          until: result is not failed
            
        - name: Create ArgoCD Admin Secret
          kubernetes.core.k8s:
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: argocd-secret
                namespace: {{ argocd_vars.kubernetes.namespace }}
                labels:
                  app.kubernetes.io/name: argocd-secret
                  app.kubernetes.io/part-of: argocd
              type: Opaque
              stringData:
                # Use bcrypt-hashed password directly, not as a template variable
                "accounts.admin.password": "{{ argocd_map.credentials.server.admin.password }}"
                "accounts.admin.passwordMtime": "{{ ansible_date_time.iso8601 }}"
            kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
            wait: true
          no_log: true

        - name: Gateway Setup
          when:
            - argocd_vars.kubernetes.configs.params.server.insecure is truthy
            - externaldns_vars.cloudflare.host.domain | lower != 'disabled'
          ansible.builtin.include_tasks: roles/common/tasks/apply_gateway.yaml
          vars:
            service_name: "{{ argocd_vars.kubernetes.server.gateway.service }}"
            service_namespace: "{{ argocd_vars.kubernetes.namespace }}"
            service_subdomain: "{{ argocd_map.gateway.server.hostname | regex_replace('\\..*$', '') }}"
            service_access: "{{ argocd_vars.kubernetes.service_access | default(global_map.services.default_access) }}"
            backend_service_name: "{{ argocd_vars.kubernetes.server.gateway.service }}"
            backend_service_port: 443
            custom_annotations: "{{ argocd_map.gateway.server.annotations | default({}) }}"
            route_name_insecure: "{{ argocd_map.gateway.server.http_route.insecure }}"
            route_name_secure: "{{ argocd_map.gateway.server.http_route.secure }}"
