---
# Recovery for resource constraint issues
- name: Get Node Information
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    kind: Node
  register: node_info

- name: Analyze Node Resources
  ansible.builtin.set_fact:
    nodes_allocatable_cpu: "{{ node_info.resources | map(attribute='status.allocatable.cpu') | map('regex_replace', '[^0-9]', '') | map('int') | list }}"
    nodes_allocatable_memory: "{{ node_info.resources | map(attribute='status.allocatable.memory') | map('regex_replace', 'Ki$', '') | map('int') | list }}"
    nodes_pressure: "{{ node_info.resources | map(attribute='status.conditions') | flatten | selectattr('type', 'equalto', 'MemoryPressure') | map(attribute='status') | list }}"

- name: Check for Resource Pressure
  ansible.builtin.set_fact:
    has_memory_pressure: "{{ nodes_pressure | select('equalto', 'True') | list | length > 0 }}"

- name: Advise on Resource Issues
  ansible.builtin.debug:
    msg: |
      Resource pressure detected on cluster nodes!
      Recommendations:
      - Consider upgrading node resources
      - Lower resource requests in component configurations
      - Remove unnecessary workloads
  when: has_memory_pressure | bool

- name: Get Resource Owner
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    kind: "{{ owner_reference.kind }}"
    name: "{{ owner_reference.name }}"
    namespace: "{{ component_namespace }}"
  loop: "{{ pod_info.resources[0].metadata.ownerReferences }}"
  loop_control:
    loop_var: owner_reference
  register: resource_owner
  when: pod_info.resources is defined and pod_info.resources | length > 0

- name: Patch Resource Requirements if Possible
  kubernetes.core.k8s:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    resource_definition:
      apiVersion: "{{ resource_owner.results[0].resources[0].apiVersion }}"
      kind: "{{ resource_owner.results[0].resources[0].kind }}"
      metadata:
        name: "{{ resource_owner.results[0].resources[0].metadata.name }}"
        namespace: "{{ component_namespace }}"
      spec:
        template:
          spec:
            containers:
              - name: "{{ pod_info.resources[0].spec.containers[0].name }}"
                resources:
                  limits:
                    memory: "{{ (pod_info.resources[0].spec.containers[0].resources.limits.memory | regex_replace('[^0-9]', '') | int * 1.5) | int }}Mi"
                  requests:
                    memory: "{{ (pod_info.resources[0].spec.containers[0].resources.requests.memory | regex_replace('[^0-9]', '') | int * 0.8) | int }}Mi"
    state: patched
  when:
    - pod_info.resources is defined
    - pod_info.resources | length > 0
    - resource_owner.results is defined
    - resource_owner.results | length > 0
    - has_memory_pressure | bool