---
# Enhanced recovery for CrashLoopBackOff issues
- name: Get Pod Details for Crash Issues
  kubernetes.core.k8s_info:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    kind: Pod
    namespace: "{{ component_namespace }}"
    label_selectors:
      - "{{ component_label }}={{ component_value }}"
  register: pod_info

- name: Get Recent Pod Logs
  kubernetes.core.k8s_log:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    name: "{{ pod_info.resources[0].metadata.name }}"
    namespace: "{{ component_namespace }}"
    container: "{{ pod_info.resources[0].spec.containers[0].name }}"
    previous: false
    tail: 50
  register: pod_logs
  failed_when: false
  when: pod_info.resources | length > 0

- name: Get Previous Pod Logs (if available)
  kubernetes.core.k8s_log:
    kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
    name: "{{ pod_info.resources[0].metadata.name }}"
    namespace: "{{ component_namespace }}"
    container: "{{ pod_info.resources[0].spec.containers[0].name }}"
    previous: true
    tail: 20
  register: previous_logs
  failed_when: false
  when:
    - pod_info.resources | length > 0
    - pod_logs.failed is not defined or not pod_logs.failed

- name: Show Pod Log Analysis
  ansible.builtin.debug:
    msg: |
      CrashLoopBackOff detected in {{ component_name }}

      Pod: {{ pod_info.resources[0].metadata.name }}

      Current Pod Logs:
      {{ pod_logs.stdout | default('No current logs available') }}

      Previous Pod Logs:
      {{ previous_logs.stdout | default('No previous logs available') }}

      Common causes:
      1. Configuration errors
      2. Missing dependencies
      3. Resource constraints
      4. Invalid command arguments
  when: pod_info.resources | length > 0

- name: Attempt Recovery Based on Log Analysis
  block:
    - name: Check for Config Map Dependencies
      kubernetes.core.k8s_info:
        kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
        kind: ConfigMap
        namespace: "{{ component_namespace }}"
      register: configmaps
      when: pod_logs.stdout is defined and pod_logs.stdout is search('config|configuration|conf')

    - name: Check for Secret Dependencies
      kubernetes.core.k8s_info:
        kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
        kind: Secret
        namespace: "{{ component_namespace }}"
      register: secrets
      no_log: true
      when: pod_logs.stdout is defined and pod_logs.stdout is search('secret|password|token|auth|key')

    - name: Check for Permission Issues
      ansible.builtin.set_fact:
        permission_issue: "{{ pod_logs.stdout is defined and pod_logs.stdout is search('permission|permissions|access denied|forbidden') }}"

    - name: Check for Resource Issues
      ansible.builtin.set_fact:
        resource_issue: "{{ pod_logs.stdout is defined and pod_logs.stdout is search('resource|memory|cpu|limit|OOM|out of memory') }}"

    # Try targeted recovery for common issues
    - name: Delete Pod for Fresh Start
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
        kind: Pod
        name: "{{ item.metadata.name }}"
        namespace: "{{ component_namespace }}"
        state: absent
      loop: "{{ pod_info.resources }}"
      when: pod_info.resources | length > 0
  when: pod_info.resources | length > 0

- name: Check Parent Object
  block:
    - name: Get Owner References
      ansible.builtin.set_fact:
        owner_refs: "{{ pod_info.resources[0].metadata.ownerReferences | default([]) }}"
      when: pod_info.resources | length > 0

    - name: Restart Deployment if Appropriate
      kubernetes.core.k8s_scale:
        kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
        kind: Deployment
        name: "{{ owner_ref.name }}"
        namespace: "{{ component_namespace }}"
        replicas: 0
      loop: "{{ owner_refs }}"
      loop_control:
        loop_var: owner_ref
      when:
        - owner_refs | length > 0
        - owner_ref.kind == 'Deployment'
        - resource_issue | default(false) or permission_issue | default(false)

    - name: Wait Before Scaling Back Up
      ansible.builtin.pause:
        seconds: 10
      when:
        - owner_refs | length > 0
        - resource_issue | default(false) or permission_issue | default(false)

    - name: Scale Back Up
      kubernetes.core.k8s_scale:
        kubeconfig: "{{ k3s_project.cluster.kubeconfig }}"
        kind: Deployment
        name: "{{ owner_ref.name }}"
        namespace: "{{ component_namespace }}"
        replicas: 1
      loop: "{{ owner_refs }}"
      loop_control:
        loop_var: owner_ref
      when:
        - owner_refs | length > 0
        - owner_ref.kind == 'Deployment'
        - resource_issue | default(false) or permission_issue | default(false)
  when:
    - pod_info.resources | length > 0
    - pod_info.resources[0].metadata.ownerReferences is defined
